.page-header
  %h2
    Examples
    %small Abba Zaba, you my only friend.
.row
  %article.flash-messages
    .row
      %h3 Flash Messages
      %p Feng Shui provides basic styles for commonly used flash message types. Simply include the <code>flash_messages</code> helper in your layout.
      .well
        = flash_messages

      :plain
        <pre class="prettyprint linenums">= flash_messages</pre>
    .row
      %h5 Custom Types
      %p You can define your own flash message types. Simply target <code>.alert-message.flash.[custom type]</code> in your CSS.

      .well
        .alert-message.flash.panic
          %a.close{:href => "#"} Ã—
          %p
            %strong Panic
            This is a panic flash.

      :plain
        <pre class="prettyprint linenums">flash["panic"] = "This is a panic flash."</pre>

      :plain
        <pre class="prettyprint linenums">.alert-message.flash.panic {
          color: #fff;
          text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);
          @include vertical-three-color-gradient($startColor: #777, $midColor: #555, $colorStop: 50%, $endColor: #333);
        }
        </pre>

  %article.confirmation-dialogs
    .row
      %h3 Confirmation Dialogs
      %p Feng Shui overrides the default JavaScript confirmation dialogs that are triggered by <code>:confirm</code>.

      .well
        = link_to "Confirmation <strong>Error</strong>".html_safe, "http://google.com", :class => "btn danger",
        :confirm => "Are you sure you want to do that?", :method => :get, :'data-type' => "Error"
        = link_to "Confirmation <strong>Warning</strong>".html_safe, "http://google.com", :class => "btn warning",
        :confirm => "Are you sure you want to do that?", :method => :get, :'data-type' => "Warning"
        = link_to "Confirmation <strong>Notice</strong>".html_safe, "http://google.com", :class => "btn notice",
        :confirm => "Are you sure you want to do that?", :method => :get, :'data-type' => "Notice"
        = link_to "Confirmation <strong>Success</strong>".html_safe, "http://google.com", :class => "btn success",
        :confirm => "Are you sure you want to do that?", :method => :get, :'data-type' => "Success"

      :plain
        <pre class="prettyprint linenums">= link_to "Confirmation &lt;strong&gt;Error&lt;/strong&gt;".html_safe, "http://google.com", :class =&gt; "btn danger",
        :confirm =&gt; "Are you sure you want to do that?", :method =&gt; :get, :'data-type' =&gt; "Error"

        = link_to "Confirmation &lt;strong&gt;Warning&lt;/strong&gt;".html_safe, "http://google.com", :class =&gt; "btn default",
        :confirm =&gt; "Are you sure you want to do that?", :method =&gt; :get, :'data-type' =&gt; "Warning"

        = link_to "Confirmation &lt;strong&gt;Notice&lt;/strong&gt;".html_safe, "http://google.com", :class =&gt; "btn notice",
        :confirm =&gt; "Are you sure you want to do that?", :method =&gt; :get, :'data-type' =&gt; "Notice"

        = link_to "Confirmation &lt;strong&gt;Success&lt;/strong&gt;".html_safe, "http://google.com", :class =&gt; "btn success",
        :confirm =&gt; "Are you sure you want to do that?", :method =&gt; :get, :'data-type' =&gt; "Success"
        </pre>

    .row
      %h5 Custom Types
      .clearfix
        .span12.columns
          %p
            You can define your own confirmation dialog types. Simply target <code>.block-message.[custom type]</code> in your CSS.
            %br
            To style the associated button, target <code>.btn.[custom type]</code>.

        .span4.columns
          .well.aside
            = link_to "Confirmation <strong>Panic</strong>".html_safe, "http://google.com", :class => "btn panic",
            :confirm => "Are you sure you want to do that?", :method => :get, :'data-type' => "Panic"

      :plain
        <pre class="prettyprint linenums">= link_to "Confirmation &lt;strong&gt;Panic&lt;/strong&gt;".html_safe, "http://google.com", :class =&gt; "btn panic",
        :confirm =&gt; "Are you sure you want to do that?", :method =&gt; :get, :'data-type' =&gt; "Panic"
        </pre>

      :plain
        <pre class="prettyprint linenums">.block-message.panic {
          background-color: #eee;
          border-color: #e1e1e1;
        }

        .btn.panic {
          color: #fff;
          text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);
          @include btnColor(#777, #333);
        }
        </pre>

  %article.tooltips
    .row
      %h3 Tooltips
      %p Simply provide a <code>:"data-tooltip"</code> attribute on any element to bind a tooltip.
      .well
        %p
          = link_to "Marfa", "http://en.wikipedia.org/wiki/Marfa,_Texas", {:target => "_blank",
            :"data-tooltip" => "Texas"}
          wolf squid fixie, cardigan organic dreamcatcher readymade retro PBR farm-to-table you probably haven't heard
          of them stumptown quinoa mlkshk. Cosby sweater craft beer squid irony, high life DIY letterpress butcher.
          = link_to "Portland", "http://en.wikipedia.org/wiki/Portland,_Oregon", {:target => "_blank",
            :"data-tooltip" => "Oregon"}
          gluten-free thundercats brunch, twee yr sartorial art party master cleanse leggings cred.
          = link_to "Brooklyn", "http://en.wikipedia.org/wiki/Brooklyn", {:target => "_blank",
            :"data-tooltip" => "New York"}
          cosby sweater +1.

      :plain
        <pre class="prettyprint linenums">= link_to "Marfa", "http://en.wikipedia.org/wiki/Marfa,_Texas", {:target => "_blank", :"data-tooltip" => "Texas"}
        = link_to "Portland", "http://en.wikipedia.org/wiki/Portland,_Oregon", {:target => "_blank", :"data-tooltip" => "Oregon"}
        = link_to "Brooklyn", "http://en.wikipedia.org/wiki/Brooklyn", {:target => "_blank", :"data-tooltip" => "New York"}
        </pre>

  %article.popovers
    .row
      %h3 Popovers
      %p Bind a popover to any element by including the following data attributes:
      %ul.unstyled
        %p <strong>Required</strong>
        %li
          <code>:"data-popover"</code> takes a CSS selector that points to an element
          containing the desired popover content.
        %br
        %p <strong>Optional</strong>
        %li
          <code>:"data-popover-title"</code> takes the desired popover title as a string.
        %li
          <code>:"data-popover-direction"</code> takes the desired pointer direction ("left" or "right").
      .well
        = link_to "Popover Trigger", "#", :"data-popover" => ".popover-content",
        :"data-popover-title" => "An Example Popover", :"data-popover-direction" => "right", :class => "btn"

        .popover-content{:style => "display:none"}
          %p A popover is like a giant tooltip that can be used to guide users through your application.

      :plain
        <pre class="prettyprint linenums">= link_to "Popover Trigger", "#", :"data-popover" => ".popover-content",
        :"data-popover-title" => "An Example Popover", :"data-popover-direction" => "right", :class => "btn"

        .popover-content{:style => "display:none"}
          %p A popover is like a giant tooltip that can be used to guide users through your application.
        </pre>

  %article.lightboxes
    .row
      %h3 Lightboxes
      %p Bind a lightbox to any element by including the following data attributes:
      %ul.unstyled
        %p <strong>Required</strong>
        %li
          <code>:"data-lightbox"</code> takes a CSS selector that points to an element
          containing the desired lightbox content.
        %br
        %p <strong>Optional</strong>
        %li
          <code>:"data-lightbox-title"</code> takes the desired lightbox title as a string.
        %li
          <code>:"data-lightbox-primary"</code> takes a JSON hash containing the primary button's display text and
          click function.
        %li
          <code>:"data-lightbox-secondary"</code> takes a JSON hash containing the secondary button's display text and
          callback function.
      .well
        = link_to "Lightbox Trigger", "#", :class => "btn",
        :"data-lightbox" => ".lightbox-content",
        :"data-lightbox-title" => "An Example Lightbox",
        :"data-lightbox-primary" => '{ "text" : "Primary Button", "callback" : "lightbox_primary_callback()" }',
        :"data-lightbox-secondary" => '{ "text" : "Secondary Button", "callback" : "lightbox_secondary_callback()" }'


        .lightbox-content{:style => "display:none"}
          = image_tag "/assets/rails.png", :alt => "Ruby on Rails"

      :plain
        <pre class="prettyprint linenums">= link_to "Lightbox Trigger", "#", :class => "btn",
        :"data-lightbox" => ".lightbox-content",
        :"data-lightbox-title" => "An Example Lightbox",
        :"data-lightbox-primary" => '{ "text" : "Primary Button", "callback" : "lightbox_primary_callback()" }',
        :"data-lightbox-secondary" => '{ "text" : "Secondary Button", "callback" : "lightbox_secondary_callback()" }'

        .lightbox-content{:style => "display:none"}
          = image_tag "/assets/rails.png", :alt => "Ruby on Rails"
        </pre>

      :javascript
        function lightbox_primary_callback() {
          alert("Primary Callback");
        }
        function lightbox_secondary_callback() {
          alert("Secondary Callback");
        }

  %article.tab-groups
    .row
      %h3 Tabs
      %p Create a tab group by passing a hash of display names and CSS selectors to the <code>tab_group</code> helper.
      %p Feng Shui will look for <code>section</code> and <code>.section</code> elements with matching CSS selectors.
      %br

      = tab_group "One" => "#tab_1", "Two" => "#tab_2", "Three" => "#tab_3", "Four" => "#tab_4", "Five" => "#tab_5"

      #tab_1.section.active
        %p Tab 1
      %section#tab_2
        %p Tab 2
      #tab_3.section
        %p Tab 3
      #tab_4.section
        %p Tab 4
      %section#tab_5
        %p Tab 5

      :plain
        <pre class="prettyprint linenums">= tab_group "One" => "#tab_1", "Two" => "#tab_2", "Three" => "#tab_3", "Four" => "#tab_4", "Five" => "#tab_5"

        #tab_1.section.active
          %p Tab 1
        %section#tab_2
          %p Tab 2
        #tab_3.section
          %p Tab 3
        #tab_4.section
          %p Tab 4
        %section#tab_5
          %p Tab 5
        </pre>

  %article.pill-groups
    .row
      %h3 Pills
      %p Create a pill group by passing a hash of display names and CSS selectors to the <code>pill_group</code> helper.
      %p Feng Shui will look for <code>section</code> and <code>.section</code> elements with matching CSS selectors.
      %br

      = pill_group "One" => "#pill_1", "Two" => "#pill_2", "Three" => "#pill_3", "Four" => "#pill_4", "Five" => "#pill_5"

      #pill_1.section.active
        %p Pill 1
      %section#pill_2
        %p Pill 2
      #pill_3.section
        %p Pill 3
      #pill_4.section
        %p Pill 4
      %section#pill_5
        %p Pill 5

      :plain
        <pre class="prettyprint linenums">= pill_group "One" => "#pill_1", "Two" => "#pill_2", "Three" => "#pill_3", "Four" => "#pill_4", "Five" => "#pill_5"

        #pill_1.section.active
          %p Pill 1
        %section#pill_2
          %p Pill 2
        #pill_3.section
          %p Pill 3
        #pill_4.section
          %p Pill 4
        %section#pill_5
          %p Pill 5
        </pre>